Hello. I'm a full stack developer and a top rated plus freelancer@upwork.com. If you have not subscribed my 
channel, you can subscribe now. It helps to create more courses and tutorials for free. So let's get started. Amazon S3 Simple Storage Service is highly scalable object based cloud storage service provided by Amazon 
Web Services. It allows users to store and retrieve any amount of data from anywhere on web. To configure Amazon S3 to store your Django project's static and media files, okay, we can follow some steps. First of all, we will need to create our s 3 bucket. Okay? So you have to log in into your AWS account. Just type s3. Click on s3. Okay. Click on create new bucket. Give bucket name. I will give name back in course. Okay. Then you can choose your region. Okay. I will choose this by default Virginia region. Okay. And then you have to keep these settings by default. Disable this option okay so okay next we can keep other settings by default Okay. In advanced settings, we can keep the settings by default as well. Create bucket. Okay. So our bucket is now created. Now let's move to your Django project. Okay. At the bottom of settings. Py file, you need to add some lines. Okay. You can copy these lines from my article. I will add this article in my video description. Okay. Just copy these lines. Go to your settings dot py file. Okay. So here you need to replace few things. Okay. Access key ID, secret access key ID. Okay. And storage bucket name. Okay. And signature, everything. So first of all, we have already created a bucket. So I will replace the bucket name. The bucket name is 
backend course. Okay. And we will keep this s 3 signature name as by default. Okay. And then we have to write the region name. Okay. So you can easily get go to your AWS. Okay. So this is our bucket name. Okay. So just copy this part of AWS region and go to your Visual Studio In your settings. Py file, replace the region name. Okay. Then we need to change these 2 things, which is AWS access key ID and secret. How we can get this? Go to AWS. Go to the home page. You need to create an I'm user that has permission to access your s 3 bucket. Type I'm Okay. The first 1. Okay. So this is our I'm management console. Click on user. Add a user. You 
can give any name as 3 xs click on next Okay. So here we need to attach a policy. Okay. You can attach policy s 3 full access. You can write Amazon s 3 full access. Okay. You can select this. Next. Okay. So policy is attached. Create user. Okay. User is created now. Okay. No. Let's copy secret key and access key. Okay? For this, you can go to security credentials and scroll down to Access Keys, Create Access Key. Okay? And here 
you can choose local code. And select I understand. Next. Okay. You can give name as 3 access. Okay. Alright. So you can create access key. No. Okay. So this is our access key. We will copy this, and we will replace 
here. Okay. And for secret key, we can copy this key, and we can place this key here. Make sure don't public these keys, okay, if your data is important. Okay. So I'm just doing for a tutorial purpose. After making this video, I will delete these keys. So alright. So we have access key, bucket name. Okay. Everything is set up now. Okay. The configurations are done. Next we have to install a package. Go to your terminal. Alright. So you have to run PEP install booto3 package. So this booto 3 library will interact with s 3 from your Django project. Alright. Now we can run our server to test our s 3 integration. Run server. Okay. Just copy this and go to your browser. Alright. Go to the admin. Alright. Let's go to product table so we can add our data because product table has an image field, so we can test. Okay. So we are getting an error. Okay. No module found. Okay. So we need to install the package for this. Okay. So you can easily, copy this package from Google. Okay. Just copy this and install this package. So our s 3 then will work. Okay. So package is installed. No. I will just run again. Okay. Okay. So you can now visit your server. Alright. Refresh it. Great. Okay. So you can add a new product. This will be address product and detail. Okay. Price you can give. Okay. So here is thing. We are going to upload image, so it will be automatically uploaded to s 3. So I will choose 
an image. Okay. And then we have to choose category and save. Alright. So our image is stored. Now let's visit AWS. Go to s 3. Alright. Open your bucket so we can check if the image is uploaded. Yeah. Okay. Our folder is there. So you can see this is our image, which we have uploaded using Django admin interface. Okay? So 
if you want to open this image, you can also open. Okay. So I have uploaded this image. So it is successfully uploaded on s 3. You can also test it using Django admin as well. You can just click on this image. So you will see this image part is linked with s 3. Okay? Alright. So with these steps, you should be able to configure your s 3 to store your Django project static and media files on AWS. Okay? So if you already existing 
some, media files, you can also run python manage dot pycollectstatic as well. Okay? So we are done with our s 3 integration with our Django project. I hope this video has been helpful. Don't forget to like, share, and subscribe my YouTube channel. If you have any questions or feedback, leave a comment below. I will get back to you. Stay tuned for more courses and tutorials. Until next time, goodbye.